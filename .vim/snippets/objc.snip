snippet imp
    #import <${1}.h>

snippet     Imp
abbr        import "hoge.h"
    #import "${1}.h"

snippet sel
    @selector(${1})${0}

snippet loc
    NSLocalizedString(@"${1}", ${2:nil})

snippet log
    NSLog(@"%s, ${1}%@", __PRETTY_FUNCTION__, ${2});${0}

snippet flog
    FRLog(@"%s, ${1}%@", __PRETTY_FUNCTION__, ${2});${0}

snippet st
    @"${1}"${0}

snippet aia
    [[[${1} alloc] init${2}] autorelease];

snippet mstr
    NSMutableString *${1:str} = [NSMutableString string];

snippet array
    NSMutableArray *${1:a} = [NSMutableArray array];

snippet dict
    NSMutableDictionary *${1:d} = [NSMutableDictionary dictionary];

snippet rel
    [${1} release];

snippet in
    - (id)init
    {
        self = [super ${1:init}];
        if (self) {${0}
        }
        return self;
    }

snippet ini
    self = [super init${1}];
    if (self) {${0}
    }
    return self;

snippet dea
    - (void)dealloc
    {${1}
    [super dealloc];
    }

snippet cli
    @interface ${1} : ${2}
    @end

snippet clm
    @interface $1 ()
    @end

    @implementation ${1}
    ${0}
    @end

snippet cati
    @interface ${1} (${2})
    @end

snippet catm
    @implementation ${1} (${2})
    @end

snippet cle
abbr class extensions
    @interface ${1} ()
    @end

snippet cat
    @interface ${1} (${2})
    @end

    @implementation $1 ($2)
    @end

snippet cl
    @class ${0};

snippet prot
    @protocol ${0}

snippet pro
    @property (${1:retain}, nonatomic) ${2} ${3};

snippet mpro
    @property (nonatomic, ${1:retain}) ${2} ${3};

snippet ibo
    IBOutlet ${1}

snippet syn
    @synthesize ${1} = $1_;${0}

snippet bp
    ${1:Return_type}(^)(${3:param types})${2:name}

snippet ib
    ${1:Return_type}(^${2:name})(${3:param types}) = ^(${4:params}) {
        ${0}
    }

snippet defblock
    typedef ${1:return type}(^${2:name})(${3:arguments});

snippet disafter
    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, ${1} * NSEC_PER_SEC);
    dispatch_after(popTime, dispatch_get_main_queue(), ^{${0}
    });

snippet disasync
    dispatch_queue_t q = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_async(q, ^{${0}
    });

snippet dismain
    dispatch_async(dispatch_get_main_queue(), ^{${0}
    });

snippet disone
    static dispatch_once_t o;
    dispatch_once(&o, ^{${0}
    });

snippet kvoadd
abbr addObserver for kvo
    [${1:obj} addObserver:${2:self}
               forKeyPath:@"${3}"
                  options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionInitial
                  context:NULL];${0}

snippet kvoob
abbr KVO observing
    - (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context
    {
        ${1}
    }

snippet uim
    [UIImage imageNamed:@"${1}"]

snippet nim
    [NSImage imageNamed:@"${1}"]

snippet uic
    [UIColor colorWithRed:${1}/255.0 green:${2}/255.0 blue:${3}/255.0 alpha:1.0]

snippet arrenu
    [${1} enumerateObjectsUsingBlock:^(${2} *${3}, NSUInteger idx, BOOL *stop) {${0}
    }];

snippet pragma
    #pragma mark - ${0}

snippet iba
    - (IBAction)${1}:(id)sender;${0}

snippet obn
    - (void)${1}:(NSNotification *)notify
    {
        ${0}
    }
